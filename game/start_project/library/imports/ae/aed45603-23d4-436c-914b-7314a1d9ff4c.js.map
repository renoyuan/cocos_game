{"version":3,"sources":["assets\\scripts\\Star.js"],"names":["cc","Class","Component","properties","pickRadius","getPlayerDistance","playerPos","game","player","getPosition","dist","node","position","sub","mag","onPicked","spawnNewStar","gainScore","console","info","destroy","start","update","dt","log","opacityRatio","timer","starDuration","minOpacity","opacity","Math","floor"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEAA,EAAE,CAACC,KAAK,CAAC;EACL,WAASD,EAAE,CAACE,SAAS;EAErBC,UAAU,EAAE;IACR;IACAC,UAAU,EAAE;EAChB,CAAC;EACDC,iBAAiB,EAAE,SAAAA,kBAAA,EAAY;IAC3B;IACA,IAAIC,SAAS,GAAG,IAAI,CAACC,IAAI,CAACC,MAAM,CAACC,WAAW,EAAE;IAC9C;IACA,IAAIC,IAAI,GAAG,IAAI,CAACC,IAAI,CAACC,QAAQ,CAACC,GAAG,CAACP,SAAS,CAAC,CAACQ,GAAG,EAAE;IAClD,OAAOJ,IAAI;EACf,CAAC;EACD;EACAK,QAAQ,EAAE,SAAAA,SAAA,EAAW;IAEjB;IACA,IAAI,CAACR,IAAI,CAACS,YAAY,EAAE;;IAExB;IACA,IAAI,CAACT,IAAI,CAACU,SAAS,EAAE;IACrBC,OAAO,CAACC,IAAI,CAAC,WAAW,CAAC;IACzB;IACA,IAAI,CAACR,IAAI,CAACS,OAAO,EAAE;EACvB,CAAC;EACD;EAEAC,KAAK,WAAAA,MAAA,EAAI,CAET,CAAC;EAEDC,MAAM,EAAE,SAAAA,OAAUC,EAAE,EAAE;IAClB;IACAL,OAAO,CAACM,GAAG,CAAC,IAAI,CAACnB,iBAAiB,EAAE,EAAC,IAAI,CAACD,UAAU,CAAC;IACrD,IAAI,IAAI,CAACC,iBAAiB,EAAE,GAAG,IAAI,CAACD,UAAU,EAAE;MAC5C;MACA,IAAI,CAACW,QAAQ,EAAE;MACf;IACJ;IACA;IACA,IAAIU,YAAY,GAAG,CAAC,GAAG,IAAI,CAAClB,IAAI,CAACmB,KAAK,GAAC,IAAI,CAACnB,IAAI,CAACoB,YAAY;IAC7D,IAAIC,UAAU,GAAG,EAAE;IACnB,IAAI,CAACjB,IAAI,CAACkB,OAAO,GAAGD,UAAU,GAAGE,IAAI,CAACC,KAAK,CAACN,YAAY,IAAI,GAAG,GAAGG,UAAU,CAAC,CAAC;EAClF;AACJ,CAAC,CAAC","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // 星星和主角之间的距离小于这个数值时，就会完成收集\n        pickRadius: 0,\n    },\n    getPlayerDistance: function () {\n        // 根据 Player 节点位置判断距离\n        var playerPos = this.game.player.getPosition();\n        // 根据两点位置计算两点之间距离\n        var dist = this.node.position.sub(playerPos).mag();\n        return dist;\n    },\n    // LIFE-CYCLE CALLBACKS:\n    onPicked: function() {\n        \n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        this.game.spawnNewStar();\n        \n        // 调用 Game 脚本的得分方法\n        this.game.gainScore();\n        console.info(\"gainScore\")\n        // 然后销毁当前星星节点\n        this.node.destroy();\n    },\n    // onLoad () {},\n\n    start () {\n\n    },\n\n    update: function (dt) {\n        // 每帧判断星星和主角之间的距离是否小于收集距离\n        console.log(this.getPlayerDistance(),this.pickRadius);\n        if (this.getPlayerDistance() < this.pickRadius) {\n            // 调用收集行为\n            this.onPicked();\n            return;\n        }\n        // 根据 Game 脚本中的计时器更新星星的透明度\n        var opacityRatio = 1 - this.game.timer/this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    },\n});\n"]}