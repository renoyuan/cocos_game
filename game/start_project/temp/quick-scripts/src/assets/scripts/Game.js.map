{"version":3,"sources":["assets\\scripts\\Game.js"],"names":["cc","Class","Component","properties","starPrefab","type","Prefab","maxStarDuration","minStarDuration","ground","Node","bg","player","scoreDisplay","Label","scoreAudio","AudioClip","onLoad","groundY","y","height","timer","starDuration","score","getComponent","game","spawnNewStar","newStar","instantiate","node","addChild","setPosition","getNewStarPosition","Math","random","randX","randY","jumpHeight","maxX","width","v2","gainScore","string","audioEngine","playEffect","start","update","dt","gameOver","stopAllActions","director","loadScene"],"mappings":"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","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        \n        // 这个属性引用了星星预制资源\n        starPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n\n        // 星星产生后消失时间的随机范围\n        maxStarDuration: 0,\n        minStarDuration: 0,\n\n        // 地面节点，用于确定星星生成的高度\n        ground: {\n            default: null,\n            type: cc.Node\n        },\n\n        // 背景节点，用于确定背景宽度\n        bg: {\n            default: null,\n            type: cc.Node\n        },\n    \n        // Player 节点，用于获取主角弹跳的高度，和控制主角行动开关\n        player: {\n            default: null,\n            type: cc.Node\n        },\n\n        // score label 的引用\n        scoreDisplay: {\n            default: null,\n            type: cc.Label\n        },\n\n   \n\n        // 得分音效资源\n        scoreAudio: {\n            default: null,\n            type: cc.AudioClip\n        }\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad: function () {\n        // 获取地平面的 y 轴坐标\n        this.groundY = this.ground.y + this.ground.height/2;\n       \n        // 初始化计时器\n        this.timer = 0;\n        this.starDuration = 0;\n\n        // 初始化计分\n        this.score = 0;\n        \n        // 给player 中添加回去game 信息 跳动不能超过页面\n        this.player.getComponent('Player').game = this;\n\n        // 生成一个新的星星\n        this.spawnNewStar();\n    },\n\n    spawnNewStar: function() {\n        // 使用给定的模板在场景中生成一个新节点\n        var newStar = cc.instantiate(this.starPrefab);\n        \n        // 将新增的节点添加到 Canvas 节点下面\n        this.node.addChild(newStar);\n        \n        // 为星星设置一个随机位置\n        newStar.setPosition(this.getNewStarPosition());\n        \n        // 在星星脚本组件上保存 Game 对象的引用\n        newStar.getComponent('Star').game = this;\n        \n        // 重置计时器，根据消失时间范围随机取一个值\n        this.starDuration = this.minStarDuration + Math.random() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n    },\n\n    getNewStarPosition: function () {\n        var randX = 0;\n        \n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\n        var randY = this.groundY + Math.random() * this.player.getComponent('Player').jumpHeight + 50;\n        \n        // 根据屏幕宽度，随机得到一个星星 x 坐标\n        var maxX = this.node.width/2;\n        randX = (Math.random() - 0.5) * 2 * maxX;\n\n        // 返回星星坐标\n        return cc.v2(randX, randY);\n    },\n\n    gainScore: function () {\n        this.score += 1;\n        // 更新 scoreDisplay Label 的文字\n        this.scoreDisplay.string = 'Score: ' + this.score;\n        // 播放得分音效\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n\n    start () {\n    },\n\n    update: function (dt) {\n        // 每帧更新计时器，超过限度还没有生成新的星星\n        // 就会调用游戏失败逻辑\n        if (this.timer > this.starDuration && false) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    },\n    \n    gameOver: function () {\n        // 停止 Player 节点的跳跃动作\n        this.player.stopAllActions(); \n\n        // 重新加载场景 game\n        cc.director.loadScene('game');\n    }\n});\n"]}