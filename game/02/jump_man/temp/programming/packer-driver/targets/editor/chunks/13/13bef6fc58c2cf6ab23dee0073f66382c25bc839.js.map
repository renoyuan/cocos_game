{"version":3,"sources":["file:///F:/cocos/cocos_game/game/02/jump_man/assets/Scipte/GameManager.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Vec3","Label","PlayerController","ccclass","property","GameState","BlockType","GameManager","type","_road","timer","start","curState","GS_INIT","playerCtrl","node","on","onPlayerJumpEnd","moveIndex","stepsLabel","string","checkResult","init","startMenu","active","generateRoad","setInputActive","setPosition","ZERO","reset","roadTurn","onStartButtonClicked","GS_PLAYING","roadLength","BT_NONE","console","info","value","setTimeout","GS_END","removeAllChildren","push","BT_STONE","i","Math","floor","random","j","length","block","spawnBlockByType","addChild","cubePrfb","update","deltaTime","stayTime","stayOverTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node ,Prefab,instantiate,CCInteger,Vec3,Label } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { PlayerController } from \"./PlayerController\";\r\n\r\n\r\nenum GameState{\r\n    GS_INIT,\r\n    GS_PLAYING,\r\n    GS_END,\r\n};\r\n\r\n// 赛道格子类型，坑（BT_NONE）或者实路（BT_STONE）\r\nenum BlockType{\r\n    BT_NONE,\r\n    BT_STONE,\r\n};\r\n\r\n\r\n\r\n@ccclass('GameManager')\r\nexport class GameManager extends Component {\r\n    \r\n    //分数\r\n    @property({type: Label})\r\n    public stepsLabel: Label | null = null;\r\n\r\n    @property({type: Node})\r\n    public startMenu: Node | null = null;\r\n\r\n    // 角色\r\n    @property({type: PlayerController})\r\n    public playerCtrl: PlayerController | null = null;\r\n    \r\n    // 赛道预制\r\n    @property({type: Prefab})\r\n    public cubePrfb: Prefab | null = null;\r\n\r\n    // 赛道长度\r\n    @property\r\n    public roadLength = 10;\r\n\r\n    // 赛道轮次\r\n    @property\r\n    public roadTurn = 1;\r\n\r\n    _road: BlockType[] = [];\r\n    \r\n    // 持续时间\r\n    @property\r\n    public stayOverTime = 5\r\n\r\n    // 计时器\r\n    timer = 0; \r\n\r\n    \r\n    start() {\r\n        \r\n        this.curState = GameState.GS_INIT; // 初始化游戏状态\r\n        // '?.' 是 Typescript 的可选链写法\r\n        //== if(this.playerCtrl != null) this.playerCtrl.node.on('JumpEnd', this.onPlayerJumpEnd, this);        \r\n        this.playerCtrl?.node.on('JumpEnd', this.onPlayerJumpEnd, this);\r\n    }\r\n    \r\n    onPlayerJumpEnd(moveIndex: number) {\r\n        if (this.stepsLabel) {\r\n            // 因为在最后一步可能出现步伐大的跳跃，但是此时无论跳跃是步伐大还是步伐小都不应该多增加分数\r\n            // this.stepsLabel.string = '' + (moveIndex >= this.roadLength ? this.roadLength : moveIndex);\r\n            this.stepsLabel.string = '' + moveIndex;\r\n        }\r\n        this.checkResult(moveIndex);\r\n    }\r\n\r\n\r\n    init() {\r\n        // 激活主界面\r\n        if (this.startMenu) {\r\n            this.startMenu.active = true;\r\n        }\r\n        // 生成赛道\r\n        this.generateRoad();\r\n        if(this.playerCtrl){\r\n            // 禁止接收用户操作人物移动指令\r\n            this.playerCtrl.setInputActive(false);\r\n            // 重置人物位置\r\n            this.playerCtrl.node.setPosition(Vec3.ZERO);\r\n            // 重置分数\r\n            this.playerCtrl.reset();\r\n            // 重置赛道轮次\r\n            this.roadTurn = 1\r\n        }\r\n        \r\n    }\r\n\r\n    onStartButtonClicked() {\r\n        this.curState = GameState.GS_PLAYING;\r\n    }\r\n\r\n    checkResult(moveIndex: number) {\r\n        if (moveIndex < this.roadLength*this.roadTurn) {\r\n            // 跳到了坑上\r\n            if (this._road[moveIndex] == BlockType.BT_NONE) {\r\n                this.curState = GameState.GS_INIT;\r\n            }\r\n        } else {    \r\n            // 取消最大长度限制，生成新的赛道--跳过了最大长度\r\n            // this.curState = GameState.GS_INIT;\r\n            console.info(\"生成新的赛道\");\r\n            this.generateRoad();\r\n        }\r\n    }\r\n\r\n    set curState (value: GameState) {\r\n        switch(value) {\r\n            case GameState.GS_INIT:\r\n                this.init();\r\n                break;\r\n            case GameState.GS_PLAYING:\r\n                if (this.startMenu) {\r\n                    this.startMenu.active = false;\r\n                }\r\n                if (this.stepsLabel) {\r\n                    this.stepsLabel.string = '0';   // 将步数重置为0\r\n                }\r\n                // 设置 active 为 true 时会直接开始监听鼠标事件，此时鼠标抬起事件还未派发\r\n                // 会出现的现象就是，游戏开始的瞬间人物已经开始移动\r\n                // 因此，这里需要做延迟处理\r\n                setTimeout(() => {\r\n                    if (this.playerCtrl) {\r\n                        this.playerCtrl.setInputActive(true);\r\n                    }\r\n                }, 0.1);\r\n                break;\r\n            case GameState.GS_END:\r\n                break;\r\n        }\r\n    }\r\n    \r\n    // 生成赛道\r\n    generateRoad() {\r\n\r\n        // 防止游戏重新开始时，赛道还是旧的赛道\r\n        // 因此，需要移除旧赛道，清除旧赛道数据\r\n        this.node.removeAllChildren();\r\n        this._road = [];\r\n        // 确保游戏运行时，人物一定站在实路上\r\n        this._road.push(BlockType.BT_STONE);\r\n\r\n        // 确定好每一格赛道类型\r\n        for (let i = 1; i < this.roadLength; i++) {\r\n            // 如果上一格赛道是坑，那么这一格一定不能为坑\r\n            if (this._road[i-1] === BlockType.BT_NONE) {\r\n                this._road.push(BlockType.BT_STONE);\r\n            } else {\r\n                this._road.push(Math.floor(Math.random() * 2));\r\n            }\r\n        }\r\n\r\n        // 根据赛道类型生成赛道\r\n        for (let j = 0; j < this._road.length; j++) {\r\n            let block: Node = this.spawnBlockByType(this._road[j]);\r\n            // 判断是否生成了道路，因为 spawnBlockByType 有可能返回坑（值为 null）\r\n            if (block) {\r\n                this.node.addChild(block);\r\n                block.setPosition(((this.roadTurn-1)*this.roadLength)+j, -1.5, 0);\r\n            }\r\n        }\r\n        \r\n        }\r\n    \r\n    // 生成石块\r\n    spawnBlockByType(type: BlockType) {\r\n        if (!this.cubePrfb) {\r\n            return null;\r\n        }\r\n    \r\n        let block: Node | null = null;\r\n        // 赛道类型为实路才生成\r\n        switch(type) {\r\n            case BlockType.BT_STONE:\r\n                block = instantiate(this.cubePrfb);\r\n                break;\r\n        }\r\n    \r\n        return block;\r\n    }\r\n    update(deltaTime: number) {\r\n        // 如果在 一个位置停留时间超过 设置时间 则 gameover ok\r\n        // console.info(\"this.startMenu.active\",this.startMenu.active,\"deltaTime\",deltaTime ,\"this.playerCtrl.stayTime\", this.playerCtrl.stayTime,\"stayOverTime\",this.stayOverTime)\r\n        if (!this.startMenu.active && this.playerCtrl.stayTime > this.stayOverTime ){\r\n            console.info(\"重新开始\")\r\n            this.curState = GameState.GS_INIT;\r\n        }\r\n        \r\n\r\n        \r\n    }\r\n}\r\n\r\n\r\n"]}