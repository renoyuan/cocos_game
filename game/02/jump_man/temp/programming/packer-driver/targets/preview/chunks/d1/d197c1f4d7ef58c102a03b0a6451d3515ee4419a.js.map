{"version":3,"sources":["file:///F:/cocos/cocos_game/game/02/jump_man/assets/Scipte/PlayerController.ts"],"names":["_decorator","Component","input","Input","Vec3","Animation","ccclass","property","PlayerController","type","_startJump","_jumpStep","_curJumpTime","_jumpTime","_curJumpSpeed","_curPos","_deltaPos","_targetPos","_curMoveIndex","start","on","EventType","MOUSE_UP","onMouseUp","setInputActive","active","off","event","getButton","jumpByStep","onOnceJumpEnd","node","emit","step","BodyAnim","play","getPosition","add","reset","update","deltaTime","setPosition","x"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, input, Input, EventMouse, Vec3,Animation    } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('PlayerController')\r\nexport class PlayerController extends Component {\r\n    // 添加动画属性\r\n    @property({type: Animation})\r\n    public BodyAnim: Animation | null = null;\r\n\r\n    // 是否接收到跳跃指令\r\n    private _startJump: boolean = false;\r\n    // 跳跃步长\r\n    private _jumpStep: number = 0;\r\n    // 当前跳跃时间\r\n    private _curJumpTime: number = 0;\r\n    // 每次跳跃时长\r\n    private _jumpTime: number = 0.1;\r\n    // 当前跳跃速度\r\n    private _curJumpSpeed: number = 0;\r\n    // 当前角色位置\r\n    private _curPos: Vec3 = new Vec3();\r\n    // 每次跳跃过程中，当前帧移动位置差\r\n    private _deltaPos: Vec3 = new Vec3(0, 0, 0);\r\n    // 角色目标位置\r\n    private _targetPos: Vec3 = new Vec3();\r\n\r\n    private _curMoveIndex = 0;\r\n    start() {\r\n        input.on(Input.EventType.MOUSE_UP, this.onMouseUp, this);\r\n    }\r\n    setInputActive(active: boolean) {\r\n        if (active) {\r\n            input.on(Input.EventType.MOUSE_UP, this.onMouseUp, this);\r\n        } else {\r\n            input.off(Input.EventType.MOUSE_UP, this.onMouseUp, this);\r\n        }\r\n    }\r\n    \r\n    onMouseUp(event: EventMouse) {\r\n        //   监控鼠标事件在 EventMouse 中，\r\n        // 如果是鼠标左键，那么 getButton 方法会返回 0，而如果是右键，则返回 2。\r\n        if (event.getButton() === 0) {\r\n            this.jumpByStep(1);\r\n        }else if (event.getButton() === 2) {\r\n            this.jumpByStep(2);\r\n        }\r\n\r\n    }\r\n    onOnceJumpEnd() {\r\n        this.node.emit('JumpEnd', this._curMoveIndex);\r\n    }\r\n    //计算目标位置、速度的方法\r\n    jumpByStep(step: number) {\r\n        // 播放动画\r\n        if (this.BodyAnim) {\r\n            if (step === 1) {\r\n                this.BodyAnim.play('oneStep');\r\n            } else if (step === 2) {\r\n                this.BodyAnim.play('twoStep');\r\n            }\r\n            this._curMoveIndex += step;\r\n        }\r\n        // 执行跳跃\r\n        if (this._startJump) {\r\n            return;\r\n        }\r\n        this._startJump = true; // 表示开始跳跃\r\n        this._jumpStep = step; // 本次跳跃的步数\r\n        this._curJumpTime = 0; // 重置下跳跃的时间\r\n        this._curJumpSpeed = this._jumpStep / this._jumpTime; // 计算跳跃的速度\r\n        this.node.getPosition(this._curPos); // 获取角色当前的位置\r\n        \r\n        // 目标位置 = 当前位置 + 步长 向量加法 结果存在 _targetPos 中\r\n        Vec3.add(this._targetPos, this._curPos, new Vec3(this._jumpStep, 0, 0));  \r\n    }\r\n\r\n\r\n    reset() {\r\n        this._curMoveIndex = 0;\r\n    }\r\n    update(deltaTime: number): void {\r\n        if( this._startJump){ // 处理跳跃的分支逻辑\r\n            this._curJumpTime += deltaTime;     \r\n            if (this._curJumpTime > this._jumpTime) { // 跳跃结束\r\n                // end\r\n                this.node.setPosition(this._targetPos);  // 强制位移到目标位置\r\n                this._startJump = false; // 标记跳跃结束\r\n            } else { // 跳跃中\r\n                // tween\r\n                this.node.getPosition(this._curPos);  // 获取当前的位置 \r\n                this._deltaPos.x = this._curJumpSpeed * deltaTime; // 计算本帧应该位移的长度\r\n                Vec3.add(this._curPos, this._curPos, this._deltaPos); // 将当前位置加上位移的长度\r\n                this.node.setPosition(this._curPos); // 设置位移后的位置\r\n                                \r\n                }\r\n            this.onOnceJumpEnd();\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n\r\n"]}