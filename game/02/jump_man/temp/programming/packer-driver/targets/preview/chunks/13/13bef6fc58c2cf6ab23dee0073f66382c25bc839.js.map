{"version":3,"sources":["file:///F:/cocos/cocos_game/game/02/jump_man/assets/Scipte/GameManager.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Vec3","PlayerController","ccclass","property","GameState","BlockType","GameManager","type","_road","start","curState","GS_INIT","playerCtrl","node","on","onPlayerJumpEnd","moveIndex","checkResult","init","startMenu","active","generateRoad","setInputActive","setPosition","ZERO","reset","onStartButtonClicked","GS_PLAYING","roadLength","BT_NONE","value","setTimeout","GS_END","removeAllChildren","push","BT_STONE","i","Math","floor","random","j","length","block","spawnBlockByType","addChild","cubePrfb","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node ,Prefab,instantiate,CCInteger,Vec3 } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { PlayerController } from \"./PlayerController\";\r\n\r\nenum GameState{\r\n    GS_INIT,\r\n    GS_PLAYING,\r\n    GS_END,\r\n};\r\n\r\n// 赛道格子类型，坑（BT_NONE）或者实路（BT_STONE）\r\nenum BlockType{\r\n    BT_NONE,\r\n    BT_STONE,\r\n};\r\n\r\n\r\n\r\n@ccclass('GameManager')\r\nexport class GameManager extends Component {\r\n    @property({type: Node})\r\n    public startMenu: Node | null = null;\r\n\r\n    @property({type: PlayerController})\r\n    public playerCtrl: PlayerController | null = null;\r\n    // 赛道预制\r\n    @property({type: Prefab})\r\n    public cubePrfb: Prefab | null = null;\r\n\r\n    // 赛道长度\r\n    @property\r\n    public roadLength = 50;\r\n    _road: BlockType[] = [];\r\n\r\n    start() {\r\n        \r\n        this.curState = GameState.GS_INIT; // 初始化游戏状态\r\n        // '?.' 是 Typescript 的可选链写法\r\n        //== if(this.playerCtrl != null) this.playerCtrl.node.on('JumpEnd', this.onPlayerJumpEnd, this);        \r\n        this.playerCtrl?.node.on('JumpEnd', this.onPlayerJumpEnd, this);\r\n    }\r\n    \r\n    onPlayerJumpEnd(moveIndex: number) {\r\n        this.checkResult(moveIndex);\r\n    }\r\n\r\n\r\n    init() {\r\n        // 激活主界面\r\n        if (this.startMenu) {\r\n            this.startMenu.active = true;\r\n        }\r\n        // 生成赛道\r\n        this.generateRoad();\r\n        if(this.playerCtrl){\r\n            // 禁止接收用户操作人物移动指令\r\n            this.playerCtrl.setInputActive(false);\r\n            // 重置人物位置\r\n            this.playerCtrl.node.setPosition(Vec3.ZERO);\r\n        }\r\n        this.playerCtrl.reset();\r\n    }\r\n\r\n    onStartButtonClicked() {\r\n        this.curState = GameState.GS_PLAYING;\r\n    }\r\n\r\n    checkResult(moveIndex: number) {\r\n        if (moveIndex < this.roadLength) {\r\n            // 跳到了坑上\r\n            if (this._road[moveIndex] == BlockType.BT_NONE) {\r\n                this.curState = GameState.GS_INIT;\r\n            }\r\n        } else {    // 跳过了最大长度\r\n            this.curState = GameState.GS_INIT;\r\n        }\r\n    }\r\n\r\n    set curState (value: GameState) {\r\n        switch(value) {\r\n            case GameState.GS_INIT:\r\n                this.init();\r\n                break;\r\n            case GameState.GS_PLAYING:\r\n                if (this.startMenu) {\r\n                    this.startMenu.active = false;\r\n                }\r\n                // 设置 active 为 true 时会直接开始监听鼠标事件，此时鼠标抬起事件还未派发\r\n                // 会出现的现象就是，游戏开始的瞬间人物已经开始移动\r\n                // 因此，这里需要做延迟处理\r\n                setTimeout(() => {\r\n                    if (this.playerCtrl) {\r\n                        this.playerCtrl.setInputActive(true);\r\n                    }\r\n                }, 0.1);\r\n                break;\r\n            case GameState.GS_END:\r\n                break;\r\n        }\r\n    }\r\n    \r\n    generateRoad() {\r\n\r\n        // 防止游戏重新开始时，赛道还是旧的赛道\r\n        // 因此，需要移除旧赛道，清除旧赛道数据\r\n        this.node.removeAllChildren();\r\n        this._road = [];\r\n        // 确保游戏运行时，人物一定站在实路上\r\n        this._road.push(BlockType.BT_STONE);\r\n\r\n        // 确定好每一格赛道类型\r\n        for (let i = 1; i < this.roadLength; i++) {\r\n            // 如果上一格赛道是坑，那么这一格一定不能为坑\r\n            if (this._road[i-1] === BlockType.BT_NONE) {\r\n                this._road.push(BlockType.BT_STONE);\r\n            } else {\r\n                this._road.push(Math.floor(Math.random() * 2));\r\n            }\r\n        }\r\n\r\n        // 根据赛道类型生成赛道\r\n        for (let j = 0; j < this._road.length; j++) {\r\n            let block: Node = this.spawnBlockByType(this._road[j]);\r\n            // 判断是否生成了道路，因为 spawnBlockByType 有可能返回坑（值为 null）\r\n            if (block) {\r\n                this.node.addChild(block);\r\n                block.setPosition(j, -1.5, 0);\r\n            }\r\n        }\r\n        \r\n        }\r\n    \r\n    // 生成石块\r\n    spawnBlockByType(type: BlockType) {\r\n        if (!this.cubePrfb) {\r\n            return null;\r\n        }\r\n    \r\n        let block: Node | null = null;\r\n        // 赛道类型为实路才生成\r\n        switch(type) {\r\n            case BlockType.BT_STONE:\r\n                block = instantiate(this.cubePrfb);\r\n                break;\r\n        }\r\n    \r\n        return block;\r\n    }\r\n    update(deltaTime: number) {\r\n        \r\n    }\r\n}\r\n\r\n\r\n"]}